#!/bin/bash
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-FileCopyrightText: 2019 Free Software Foundation Europe e.V.

REPO="${1}"
REUSE_OPT_GLOBAL="${2}"
REUSE_OPT_LINT="${3}"
TMP="$(mktemp)"

LOGFILE="/tmp/reuse.log"

log () {
  echo "[$(date +"%Y-%m-%d %H:%M:%S")] $*" >> "${LOGFILE}"
}

log "Check repo ${REPO} with optional arguments: ${REUSE_OPT_GLOBAL} ${REUSE_OPT_LINT}"

# Test if repo URL provided
if [[ -z ${REPO} ]]; then
  log "No repo URL provided"
  exit 41
fi
# Test if API worker runner image exists
if [[ "$(docker images -q reuse-api-worker-runner 2> /dev/null)" == "" ]]; then
  log "reuse-api-worker-runner Docker image does not exist."
  exit 42
fi

# Create ENV file containing REUSE args
echo "REUSE_OPT_GLOBAL=${REUSE_OPT_GLOBAL}" > "$TMP"
echo "REUSE_OPT_LINT=${REUSE_OPT_LINT}" >> "$TMP"

# Compose name for docker container derived from user__repo
# + limit to 255 characters in total (Docker limit)
# + add a short hash from the whole repository URL
# + replace invalid characters
DNAME_REPO="$(echo "$(basename "$(dirname "${REPO}")")__$(basename "${REPO}")" | cut -c -245)"
DNAME_HASH="$(echo "${REPO}" | xxh32sum | awk '{print $1}')"
DNAME="$(echo "${DNAME_REPO}__${DNAME_HASH}" | sed -E -e 's/^[^a-zA-Z0-9]//' -e 's/[^a-zA-Z0-9_.-]//g')"

# Run docker image and return status
docker run --env-file "$TMP" --name "${DNAME}" --rm reuse-api-worker-runner "${REPO}"
status=$?

rm "$TMP"

log "Exit ${REPO} with ${status}"

exit $status
